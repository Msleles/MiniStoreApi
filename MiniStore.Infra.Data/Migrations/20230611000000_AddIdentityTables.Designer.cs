// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniStore.Infra.Data.Context;

#nullable disable

namespace MiniStore.Infra.Data.Migrations
{
    [DbContext(typeof(MiniStoreDbContext))]
    [Migration("20230611000000_AddIdentityTables")]
    partial class AddIdentityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MiniStore.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DataCadastro")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99b6adc5-f778-43a0-bf94-5a672821e9a9"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7872), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Material Escolar",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("678f429f-9f73-4f79-b926-abae47a8a6fa"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7902), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Eletrônicos",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("bb59a24e-b47a-4bc2-b827-3944c9e4cc9d"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7905), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Acessórios",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("13a4d3cb-2b6e-42e5-bf44-ce2f7e07612d"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7909), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Roupas e Moda",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("0a267592-1a0a-4807-a94c-8e32a407ae98"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7913), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Casa e Decoração",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ffc41ace-6138-4f57-839a-bb946b99715a"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7918), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Alimentos e Bebidas",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("b09d1ce6-26ec-4a2d-98c2-8fe2dbbd4b2a"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7921), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Beleza e Cuidados Pessoais",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("8610348f-3da7-4354-b6f0-e24e332bf08f"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7941), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Automotivo",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("9e5ed83a-5d48-4722-a9e3-527eb37380f9"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7945), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Esportes e Atividades ao Ar Livre",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("04de1232-e6fb-4412-93d4-ac1fad5e4d7e"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7949), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Brinquedos e Jogos",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("2169db18-8c7e-413f-86c4-db01e5e17725"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7952), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Livros e Mídia",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("9d3c816f-63db-4ed9-a37e-3eb98db5fcf1"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7955), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Saúde e Bem-Estar",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ddc6d764-969c-453e-bdc4-26e2f8d6501e"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7958), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Ferramentas e Equipamentos",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("10162243-0a4c-47a6-b940-caf34c0b5950"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7961), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Móveis",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("2f1bb71a-f70b-4d41-8cf0-8f2f4430f1fe"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7965), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Joias e Acessórios",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("3e8dee24-055a-4501-bc00-db3de1bc0dc5"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7973), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Instrumentos Musicais",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("92b38264-7c81-4dba-8b01-f7dbaf17391f"),
                            DataCadastro = new DateTimeOffset(new DateTime(2023, 6, 10, 21, 0, 0, 413, DateTimeKind.Unspecified).AddTicks(7976), new TimeSpan(0, -3, 0, 0, 0)),
                            Nome = "Pet Shop e Animais de Estimação",
                            Status = true
                        });
                });

            modelBuilder.Entity("MiniStore.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DataCadastro")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("MiniStore.Infra.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MiniStore.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MiniStore.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniStore.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MiniStore.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiniStore.Domain.Entities.Produto", b =>
                {
                    b.HasOne("MiniStore.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("MiniStore.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
